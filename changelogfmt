#!/usr/bin/env node

const readline = require('readline')
const https = require('https')

const rl = readline.createInterface({ input: process.stdin })
const versions = []
const references = {}
let repoUrl

rl.on('line', line => {
  if (line.startsWith('## [')) {
    const version = line.split(' ')[1].slice(1, -1)
    versions.push(version)
    console.log(line)
    return
  }

  if (line.startsWith('[Unreleased]:')) {
    repoUrl = line.split(' ')[1].replace(/\/compare\/.*$/, '')

    for (let i = 0; i < versions.length - 1; i++) {
      const target = versions[i] === 'Unreleased' ? 'HEAD' : `v${versions[i]}`
      console.log(`[${versions[i]}]: ${repoUrl}/compare/v${versions[i + 1]}...${target}`)
    }

    const firstVersion = versions[versions.length - 1]
    console.log(`[${firstVersion}]: ${repoUrl}/tree/v${firstVersion}`)

    return
  }

  if (line.startsWith('[')) {
    const reference = line.split(']')[0].slice(1)

    if (versions.includes(reference)) {
      return
    }

    if (reference.startsWith('#') && (reference.slice(1) in references)) {
      references[reference.slice(1)] = line.slice(line.indexOf(':') + 2)
      return
    }
  }

  const matches = line.match(/\[#\d+\]/g)

  if (matches) {
    for (const match of matches) {
      references[match.slice(2, -1)] = null
    }
  }

  console.log(line)
})

rl.on('close', async () => {
  for (let [number, link] of Object.entries(references)) {
    if (!link) {
      link = `${repoUrl}/issues/${number}`

      // Leverage the fact that if calling GitHub `/issues/` with a PR number,
      // it redirects to `/pull/` to make sure we're properly linking
      // new references.
      await new Promise(resolve => {
        https.get(link, res => {
          if (res.headers.location) {
            link = res.headers.location
          }

          resolve()
        })
      })
    }

    console.log(`[#${number}]: ${link}`)
  }
})
